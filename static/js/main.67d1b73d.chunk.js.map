{"version":3,"sources":["components/Guide.js","data.js","App.js","index.js"],"names":["Guide","className","href","target","style","color","dictionary","FRUIT","MOVIES","COLORS","completedWords","addCompletedWord","word","status","push","Start","props","useState","wordInput","setWordInput","themeInput","setThemeInput","errorMessage","setErrorMessage","themeSelect","setThemeSelect","win","lose","value","onChange","event","onClick","upperCaseTheme","toUpperCase","Object","keys","includes","setTimeout","map","theme","upperCaseWord","every","letter","alphabet","randomPair","filteredThemes","filter","length","randomTheme","Math","floor","random","words","Game","pair","setPair","correctLetters","setCorrectLetters","falseLetters","setFalseLetters","setStatus","hint","hintVisibility","setHintVisibility","useEffect","onWin","onLose","onQuit","src","alt","visibility","correctLetter","falseLetter","backgroundColor","concat","handleLetter","App","start","setStart","setWin","setLose","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.67d1b73d.chunk.js","sourcesContent":["function Guide() {\r\n  return (\r\n    <div className=\"guide\">\r\n      <h1 className=\"guideHeader\">Guide</h1>\r\n      <h4 className=\"guideHeader\">\r\n        Click{\" \"}\r\n        <a href=\"https://www.wikihow.com/Play-Hangman\" target=\"_blank\">\r\n          here\r\n        </a>{\" \"}\r\n        to learn the basics of Hangman.{\" \"}\r\n      </h4>\r\n      <b> Before the game: </b>\r\n      <ul>\r\n        <li>\r\n          You can choose to start the game with a provided list of answers by\r\n          clicking the \"Start game\" button.\r\n        </li>\r\n        <li>\r\n          You can also choose to add your own answer to the game by following\r\n          the steps below:\r\n          <ol>\r\n            <li>\r\n              In the second space provided, choose the corresponding theme from\r\n              the drop-down menu located on the left. Note that each theme can\r\n              have multiple words.\r\n            </li>\r\n            <li>\r\n              Input your word and click the \"Add word\" button to add your answer\r\n              to the list of answers.\r\n            </li>\r\n            <li>\r\n              If your theme is not found in the selection, input your theme in\r\n              the first space provided and click the \"Add theme\" button.\r\n            </li>\r\n            <li>\r\n              Repeat steps 1 - 3 to add multiple themes and words. Once you are\r\n              ready, click \"Start game\".\r\n            </li>\r\n          </ol>\r\n        </li>\r\n      </ul>\r\n      <b> During the game: </b>\r\n      <ul>\r\n        <li> Click \"Restart\" to generate a new word. </li>\r\n        <li> Click \"Quit\" to go back to the homepage. </li>\r\n        <li>\r\n          {\" \"}\r\n          If you need a hint, click the \"Hint\" button to reveal the theme of the\r\n          answer.\r\n        </li>\r\n        <li>\r\n          {\" \"}\r\n          At the end of the game, the webpage will show a history of your past\r\n          completed words. <b style={{ color: \"red\" }}>Red</b> words are lose\r\n          attempts and <b style={{ color: \"green\" }}>Green</b> words are won\r\n          attempts.\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Guide;\r\n","// const words = [\"APPLE\"];\r\n\r\n// export default words;\r\n\r\n// export function addWord(word) {\r\n//   words.push(word);\r\n// }\r\n\r\nconst dictionary = {\r\n  FRUIT: [\"APPLE\", \"AVOCADO\", \"ORANGE\", \"GUAVA\"],\r\n  MOVIES: [\"STAR WARS\", \"LORD OF THE RINGS\", \"FINDING NEMO\", \"JAMES BOND\"],\r\n  COLORS: [\"RED\", \"GREEN\", \"BLUE\", \"BLACK\"]\r\n};\r\n\r\nexport const completedWords = [];\r\n\r\nexport default dictionary;\r\n\r\nexport function addCompletedWord(word, status) {\r\n  completedWords.push([word, status]);\r\n}\r\nexport function addTheme(theme) {\r\n  dictionary[theme] = [];\r\n}\r\n\r\nexport function addWord(theme, word) {\r\n  dictionary[theme].push(word);\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport \"./styles.css\";\nimport Guide from \"./components/Guide\";\n\nimport dictionary, {\n  addCompletedWord,\n  addTheme,\n  addWord,\n  completedWords\n} from \"./data\";\n\nfunction Start(props) {\n  const [wordInput, setWordInput] = useState(\"\");\n  const [themeInput, setThemeInput] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [themeSelect, setThemeSelect] = useState(\"FRUIT\");\n\n  return (\n    <>\n      <h1 className=\"mainHeader\">HANGMAN</h1>\n      Win: {props.win}\n      <br />\n      Lose: {props.lose}\n      <br />\n      <input\n        value={themeInput}\n        onChange={(event) => setThemeInput(event.target.value)}\n      />\n      <button\n        onClick={() => {\n          const upperCaseTheme = themeInput.toUpperCase();\n          if (themeInput && !Object.keys(dictionary).includes(upperCaseTheme)) {\n            addTheme(upperCaseTheme);\n            setThemeInput(\"\");\n          } else {\n            setErrorMessage(\"Invalid theme. Try again.\");\n            setThemeInput(\"\");\n            setTimeout(() => setErrorMessage(\"\"), 2500);\n          }\n        }}\n      >\n        Add theme\n      </button>\n      <br />\n      <select\n        value={themeSelect}\n        onChange={(event) => setThemeSelect(event.target.value)}\n      >\n        {Object.keys(dictionary).map((theme) => (\n          <option value={theme}>{theme}</option>\n        ))}\n      </select>\n      <input\n        value={wordInput}\n        onChange={(event) => setWordInput(event.target.value)}\n      />\n      <button\n        onClick={() => {\n          const upperCaseWord = wordInput.toUpperCase();\n          if (\n            wordInput &&\n            [...upperCaseWord].every(\n              (letter) => letter === \" \" || alphabet.includes(letter)\n            ) &&\n            !dictionary[themeSelect].includes(upperCaseWord)\n          ) {\n            addWord(themeSelect, upperCaseWord);\n            setWordInput(\"\");\n            setErrorMessage(\"\");\n          } else {\n            setErrorMessage(\"Invalid word. Try again.\");\n            setWordInput(\"\");\n            setTimeout(() => setErrorMessage(\"\"), 2500);\n          }\n        }}\n      >\n        Add Word\n      </button>\n      <br />\n      <button onClick={props.onClick}>Start Game</button>\n      <br />\n      {errorMessage && <h1 className=\"error\">{errorMessage}</h1>}\n      <br />\n    </>\n  );\n}\n\nconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nfunction randomPair() {\n  const filteredThemes = Object.keys(dictionary).filter(\n    (theme) => theme.length !== 0\n  );\n  const randomTheme =\n    filteredThemes[Math.floor(Math.random() * filteredThemes.length)];\n  const words = dictionary[randomTheme];\n  const randomWord = words[Math.floor(Math.random() * words.length)];\n  return [randomTheme, randomWord];\n}\n\nfunction Game(props) {\n  const [pair, setPair] = useState(randomPair());\n  const [correctLetters, setCorrectLetters] = useState([]);\n  const [falseLetters, setFalseLetters] = useState([]);\n  const [status, setStatus] = useState(\"play\");\n  const hint = pair[0];\n  const [hintVisibility, setHintVisibility] = useState(false);\n\n  function handleLetter(letter) {\n    if (!(correctLetters.includes(letter) || falseLetters.includes(letter))) {\n      if (pair[1].includes(letter)) {\n        setCorrectLetters(correctLetters.concat(letter));\n      } else {\n        setFalseLetters(falseLetters.concat(letter));\n      }\n    }\n  }\n\n  function checkStatus() {\n    if (\n      [...pair[1]].every(\n        (letter) => letter === \" \" || correctLetters.includes(letter)\n      )\n    ) {\n      setStatus(\"win\");\n      addCompletedWord(pair[1], \"win\");\n    } else if (falseLetters.length >= 6) {\n      setStatus(\"lose\");\n      addCompletedWord(pair[1], \"lose\");\n    }\n  }\n\n  useEffect(checkStatus, [falseLetters, correctLetters]);\n  useEffect(() => {\n    status === \"win\" ? props.onWin() : status === \"lose\" && props.onLose();\n  }, [status]);\n\n  function restart() {\n    setCorrectLetters([]);\n    setFalseLetters([]);\n    setStatus(\"play\");\n    setPair(randomPair());\n    setHintVisibility(false);\n  }\n\n  return (\n    <>\n      <h1 className=\"mainHeader\">HANGMAN</h1>\n      <button onClick={props.onQuit}>Quit</button>\n      <button onClick={restart}>Restart</button>\n      <br />\n      <br />\n      <button onClick={() => setHintVisibility(true)}>Hint</button>\n      <br />\n      {hintVisibility && `Hint: The theme is ${hint}`}\n      <br />\n      <img\n        className=\"hangmanImage\"\n        src={falseLetters.length + 1 + \".png\"}\n        alt=\"Hangman\"\n      />\n      <br />\n      {[...pair[1]].map((letter) => {\n        const visibility = correctLetters.includes(letter)\n          ? \"visible\"\n          : \"hidden\";\n        return (\n          <span\n            className={letter !== \" \" && \"underscored\"}\n            style={{ visibility }}\n          >\n            {letter === \" \" ? \"11\" : letter}\n          </span>\n        );\n      })}\n      <br />\n      <br />\n      {[...alphabet].map((letter) => {\n        const correctLetter = correctLetters.includes(letter);\n        const falseLetter = falseLetters.includes(letter);\n        const backgroundColor = correctLetter\n          ? \"green\"\n          : falseLetter\n          ? \"red\"\n          : \"white\";\n        const color = correctLetter || falseLetter ? \"white\" : \"black\";\n        return (\n          <button\n            className=\"keyboard\"\n            onClick={status === \"play\" ? () => handleLetter(letter) : null}\n            style={{ backgroundColor, color }}\n          >\n            {letter}\n          </button>\n        );\n      })}\n      <br />\n      <div\n        className=\"end\"\n        style={{ color: status === \"win\" ? \"green\" : \"red\" }}\n      >\n        {status === \"win\" ? \"You Win!\" : status === \"lose\" && \"You Lose!\"}\n      </div>\n      <br />\n      {status === \"lose\" && `The correct answer is ${pair[1]}`}\n      <div>\n        {status !== \"play\" && (\n          <>\n            <b>History of Completed Words</b>\n            <div className=\"historyList\">\n              <ol>\n                {completedWords.map(([word, status]) => (\n                  <li\n                    className=\"element\"\n                    style={{ color: status === \"win\" ? \"green\" : \"red\" }}\n                  >\n                    {word}\n                  </li>\n                ))}\n              </ol>\n            </div>\n          </>\n        )}\n      </div>\n      <br />\n    </>\n  );\n}\n\nexport default function App() {\n  const [start, setStart] = useState(false);\n  const [win, setWin] = useState(0);\n  const [lose, setLose] = useState(0);\n\n  return (\n    <div className=\"App\">\n      {start ? (\n        <Game\n          onQuit={() => setStart(false)}\n          onWin={() => setWin(win + 1)}\n          onLose={() => setLose(lose + 1)}\n        />\n      ) : (\n        <Start win={win} lose={lose} onClick={() => setStart(true)} />\n      )}\n      <Guide />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}